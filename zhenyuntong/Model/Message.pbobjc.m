// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IMMessage

@implementation IMMessage

@dynamic senderId;
@dynamic messageType;
@dynamic messageState;
@dynamic receiveId;
@dynamic content;
@dynamic sendTime;
@dynamic msgId;
@dynamic sendCount;

typedef struct IMMessage__storage_ {
  uint32_t _has_storage_[1];
  IMMessage_MessageType messageType;
  IMMessage_MessageState messageState;
  int32_t sendCount;
  NSString *senderId;
  NSString *receiveId;
  NSString *content;
  int64_t sendTime;
  int64_t msgId;
} IMMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "senderId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_SenderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMMessage__storage_, senderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageType",
        .dataTypeSpecific.enumDescFunc = IMMessage_MessageType_EnumDescriptor,
        .number = IMMessage_FieldNumber_MessageType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMMessage__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageState",
        .dataTypeSpecific.enumDescFunc = IMMessage_MessageState_EnumDescriptor,
        .number = IMMessage_FieldNumber_MessageState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMMessage__storage_, messageState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiveId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_ReceiveId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMMessage__storage_, receiveId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IMMessage__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_MsgId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IMMessage__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendCount",
        .dataTypeSpecific.className = NULL,
        .number = IMMessage_FieldNumber_SendCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(IMMessage__storage_, sendCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMessage class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\013\000\003\014\000\004\t\000\006\010\000\007\005\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IMMessage_MessageType_RawValue(IMMessage *message) {
  GPBDescriptor *descriptor = [IMMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMMessage_FieldNumber_MessageType];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMMessage_MessageType_RawValue(IMMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [IMMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMMessage_FieldNumber_MessageType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t IMMessage_MessageState_RawValue(IMMessage *message) {
  GPBDescriptor *descriptor = [IMMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMMessage_FieldNumber_MessageState];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMMessage_MessageState_RawValue(IMMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [IMMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMMessage_FieldNumber_MessageState];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum IMMessage_MessageType

GPBEnumDescriptor *IMMessage_MessageType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Login\000Send\000Reply\000Ping\000Exit\000ReplyLog"
        "in\000ReplyExit\000Squeeze\000";
    static const int32_t values[] = {
        IMMessage_MessageType_None,
        IMMessage_MessageType_Login,
        IMMessage_MessageType_Send,
        IMMessage_MessageType_Reply,
        IMMessage_MessageType_Ping,
        IMMessage_MessageType_Exit,
        IMMessage_MessageType_ReplyLogin,
        IMMessage_MessageType_ReplyExit,
        IMMessage_MessageType_Squeeze,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(IMMessage_MessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:IMMessage_MessageType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL IMMessage_MessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case IMMessage_MessageType_None:
    case IMMessage_MessageType_Login:
    case IMMessage_MessageType_Send:
    case IMMessage_MessageType_Reply:
    case IMMessage_MessageType_Ping:
    case IMMessage_MessageType_Exit:
    case IMMessage_MessageType_ReplyLogin:
    case IMMessage_MessageType_ReplyExit:
    case IMMessage_MessageType_Squeeze:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum IMMessage_MessageState

GPBEnumDescriptor *IMMessage_MessageState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Statenone\000Waitsend\000Sending\000Success\000Failu"
        "re\000";
    static const int32_t values[] = {
        IMMessage_MessageState_Statenone,
        IMMessage_MessageState_Waitsend,
        IMMessage_MessageState_Sending,
        IMMessage_MessageState_Success,
        IMMessage_MessageState_Failure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(IMMessage_MessageState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:IMMessage_MessageState_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL IMMessage_MessageState_IsValidValue(int32_t value__) {
  switch (value__) {
    case IMMessage_MessageState_Statenone:
    case IMMessage_MessageState_Waitsend:
    case IMMessage_MessageState_Sending:
    case IMMessage_MessageState_Success:
    case IMMessage_MessageState_Failure:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
